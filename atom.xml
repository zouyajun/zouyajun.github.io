<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>躺在屋顶上的猫</title>
  
  <subtitle>程序员技术栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-14T06:14:36.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ryan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>objectForKey与valueForKey在NSDictionary中的差异</title>
    <link href="http://yoursite.com/2017/12/14/objectForKey%E4%B8%8EvalueForKey%E5%9C%A8NSDictionary%E4%B8%AD%E7%9A%84%E5%B7%AE%E5%BC%82/"/>
    <id>http://yoursite.com/2017/12/14/objectForKey与valueForKey在NSDictionary中的差异/</id>
    <published>2017-12-14T06:13:55.000Z</published>
    <updated>2017-12-14T06:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="objectForKey与valueForKey在NSDictionary中的差异"><a href="#objectForKey与valueForKey在NSDictionary中的差异" class="headerlink" title="objectForKey与valueForKey在NSDictionary中的差异"></a>objectForKey与valueForKey在NSDictionary中的差异</h2><p>先从 NSDictionary 文档中来看这两个方法的定义</p><ul><li>objectForKey<blockquote><p>returns the value associated with aKey, or nil if no value is associated with aKey. 返回指定 key 的 value，若没有这个 key 返回 nil</p></blockquote></li><li>valueForKey<blockquote><p>returns the value associated with a given key. 同样是返回指定 key 的 value</p></blockquote></li></ul><p>直观上看这两个方法好像没有什么区别，但文档里 valueForKey: 有额外一点：</p><p>If key does not start with “@”, invokes objectForKey:. If key does start with “@”, strips the “@” and invokes [super valueForKey:] with the rest of the key. via Discussion</p><p>一般来说 key 可以是任意字符串组合，如果 key 不是以 @ 符号开头，这时候 valueForKey: 等同于 objectForKey:，如果是以 @ 开头，去掉 key 里的 @ 然后用剩下部分作为 key 执行 [super valueForKey:]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@interface Person : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, retain) NSString *name;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Person *person = [[Person alloc] init];</span><br><span class="line"></span><br><span class="line">person.name = @&quot;fannheyward&quot;;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;name:%@&quot;, [person name]);</span><br><span class="line"></span><br><span class="line">//name:fannheyward</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;name:%@&quot;, [person valueForKey:@&quot;name&quot;]);</span><br><span class="line"></span><br><span class="line">//name:fannheyward</span><br><span class="line"></span><br><span class="line">[person release];</span><br></pre></td></tr></table></figure><p>valueForKey: 取值是找和指定 key 同名的 property accessor，没有的时候执行 valueForUndefinedKey:，而 valueForUndefinedKey: 的默认实现是抛出 NSUndefinedKeyException 异常。</p><p>回过头来看刚才 crash 的例子， [dict valueForKey:@”@theKey”]; 会把 key 里的 @ 去掉，也就变成了 [dict valueForKey:@”theKey”];，而 dict 不存在 theKey 这样的 property，转而执行 [dict valueForUndefinedKey:@”theKey”];，抛出 NSUndefinedKeyException 异常后 crash 掉。</p><p>objectForKey: 和 valueForKey: ==在多数情况下都是一样的结果返回，但是如果 key 是以 @ 开头，valueForKey: 就成了一个大坑，建议在 NSDictionary 下只用 objectForKey: 来取值。==</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;objectForKey与valueForKey在NSDictionary中的差异&quot;&gt;&lt;a href=&quot;#objectForKey与valueForKey在NSDictionary中的差异&quot; class=&quot;headerlink&quot; title=&quot;objectForK
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过运行时Runtime给Model类赋值</title>
    <link href="http://yoursite.com/2017/12/14/%E9%80%9A%E8%BF%87%E8%BF%90%E8%A1%8C%E6%97%B6Runtime%E7%BB%99Model%E7%B1%BB%E8%B5%8B%E5%80%BC/"/>
    <id>http://yoursite.com/2017/12/14/通过运行时Runtime给Model类赋值/</id>
    <published>2017-12-14T06:08:24.000Z</published>
    <updated>2017-12-14T06:09:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现实体基类中的方法"><a href="#实现实体基类中的方法" class="headerlink" title="实现实体基类中的方法"></a>实现实体基类中的方法</h3><blockquote><p>实体基类中的方法是从各个Model中抽象出来的并且可以重复利用的部分，在实体基类的方法中大致包括：生成getter方法，生成setter方法，获取Model类的属性，把字典的值赋给对应的Model, 动态的调用getter方法对实体类的属性值进行遍历</p></blockquote><ul><li>根据Key值生成set方法<blockquote><p>首先要编写的方法是传入一个字符串，然后返回该字符串所对应属性的setter方法。这个方法其实很简单的，就是把对应的字符串的首字母大写并且拼接上set关键字，再生产SEL并返回</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (SEL)setUpSetterWithPropertyName:(NSString *)propertyName &#123;</span><br><span class="line">// 注意此处的冒号不可以忘记</span><br><span class="line">propertyName = [NSString stringWithFormat:@&quot;set%@:&quot;,propertyName.capitalizedString];</span><br><span class="line">r</span><br></pre></td></tr></table></figure><ul><li>把字典赋值给当前类的属性<blockquote><p>把字典传入到方法中，并把字典的值赋给相应实体类的属性，该方法需要调用上述方法来生成setter方法，通过setter方法把字典的Value赋值给实体类对应的属性，代码如下，下面代码中的注释还是比较详细的，具体细节就参考下面注释的内容了。通过调用这个方法就可以把字典的值赋给对应的实体类的属性，调用这个方法的前提是要求字典的key与实体类的属性名必须相同</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/************************************************************************</span><br><span class="line">*把字典赋值给当前实体类的属性</span><br><span class="line">*参数：字典</span><br><span class="line">*适用情况：当网络请求的数据的key与实体类的属性相同时可以通过此方法吧字典的Value</span><br><span class="line">*        赋值给实体类的属性</span><br><span class="line">************************************************************************/</span><br><span class="line">- (void)assignToPropertyWithDictionary:(NSDictionary *)dict &#123;</span><br><span class="line">for (NSString *key in dict.allKeys) &#123;</span><br><span class="line">// 遍历字典的所有key值生成对应的setter方法</span><br><span class="line">SEL selector = [self setUpSetterWithPropertyName:key];</span><br><span class="line">if ([self respondsToSelector:selector]) &#123;</span><br><span class="line">NSString *value = [NSString stringWithFormat:@&quot;%@&quot;,dict[key]];</span><br><span class="line">//把字典Value值通过Setter方法赋值给model类的属性</span><br><span class="line">[self performSelectorOnMainThread:selector</span><br><span class="line">withObject:value</span><br><span class="line">waitUntilDone:[NSThread isMainThread]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取Model的实体属性"><a href="#获取Model的实体属性" class="headerlink" title="获取Model的实体属性"></a>获取Model的实体属性</h3><ul><li>遍历model类的属性</li></ul><blockquote><p>要想遍历Model类的属性，首先得通过Runtime来获取该Model类有哪些属性，输出Model的所有属性的值可不像遍历Dictionary和Array那样一个for循环搞定的，下面的方法是通过Runtime来获取Model类的属性字符串，并以数组的形式返回</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const char *propertiesKey = &quot;propertiesKey&quot;;</span><br><span class="line">- (NSArray *)qc_allPropertyNames &#123;</span><br><span class="line"></span><br><span class="line">// 在oc 中 类的本质就是一个对象 将属性列表缓存</span><br><span class="line">NSArray *plist = objc_getAssociatedObject(self, propertiesKey);</span><br><span class="line">if (plist != nil) &#123;</span><br><span class="line">return plist;</span><br><span class="line">&#125;</span><br><span class="line">// 存储模型对象的属性名称</span><br><span class="line">NSMutableArray *allPropertys = [NSMutableArray array];</span><br><span class="line">// 模型属性数量</span><br><span class="line">unsigned int propertyCount = 0;</span><br><span class="line">// 通过运行时获取对象的属性</span><br><span class="line">objc_property_t *propertys = class_copyPropertyList([self class], &amp;propertyCount);</span><br><span class="line">for (int i = 0; i &lt; propertyCount; i ++) &#123;</span><br><span class="line">// 获取一个属性</span><br><span class="line">objc_property_t property = propertys[i];</span><br><span class="line">const char *propertyName = property_getName(property);</span><br><span class="line">[allPropertys addObject:[NSString stringWithUTF8String:propertyName]];</span><br><span class="line">&#125;</span><br><span class="line">// 释放</span><br><span class="line">free(propertys);</span><br><span class="line">objc_setAssociatedObject(self, propertiesKey, allPropertys, OBJC_ASSOCIATION_COPY);</span><br><span class="line">NSLog(@&quot;allProperties is %@&quot;,allPropertys);</span><br><span class="line">return allPropertys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>根据属性字符串生成getter方法<blockquote><p>获取到Model类的属性方法后需要把属性字符串生成get方法，我们可以执行get方法来获取Model属性的值，下方的方法是根据属性字符串来获取属性的getter方法，OC中属性的getter方法的名字和属性的名字是一致的，生成getter方法比较简单</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (SEL)setUpGetterWithPropertyName:(NSString *)propertyName &#123;</span><br><span class="line">return NSSelectorFromString(propertyName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Getter方法的执行"><a href="#Getter方法的执行" class="headerlink" title="Getter方法的执行"></a>Getter方法的执行</h3><blockquote><p>接下来要做的是通过Runtime来执行Getter方法，这一块需要通过方法的签名来执行Getter方法。在OC的运行时中要执行的方法需要传入参数或者需要接收返回值时，需要通过方法的签名来调用方法。下面的代码就是创建方法的签名，然后通过签名来获取调用的对象，在下边的方中回调用上述两个方法在通过方法的签名来获取Model属性的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (void)qc_displayCurrentModelProperty &#123;</span><br><span class="line">NSArray *propertys = [self qc_allPropertyNames];</span><br><span class="line">NSMutableString *resultString = [[NSMutableString alloc] init];</span><br><span class="line">for (int i = 0; i &lt; propertys.count; i ++) &#123;</span><br><span class="line">SEL getterSelector = [self setUpGetterWithPropertyName:propertys[i]];</span><br><span class="line">if ([self respondsToSelector:getterSelector]) &#123;</span><br><span class="line">// 获取类和方法的签名</span><br><span class="line">NSMethodSignature *signature = [self methodSignatureForSelector:getterSelector];</span><br><span class="line">// 从签名获取调用对象</span><br><span class="line">NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];</span><br><span class="line">[invocation setTarget:self];</span><br><span class="line">[invocation setSelector:getterSelector];</span><br><span class="line">NSObject *__unsafe_unretained returnValue = nil;</span><br><span class="line">[invocation invoke];</span><br><span class="line">[invocation getReturnValue:&amp;returnValue];</span><br><span class="line">[resultString appendFormat:@&quot;%@\n&quot;,returnValue];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">NSLog(@&quot;resultString is %@&quot;,resultString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dictionary的Key与Model的属性不同的处理方式"><a href="#Dictionary的Key与Model的属性不同的处理方式" class="headerlink" title="Dictionary的Key与Model的属性不同的处理方式"></a>Dictionary的Key与Model的属性不同的处理方式</h3><blockquote><p>有时候会遇到字典的key和Model的属性不一样的情况，那么如何去解决这个问题呢？最简单的做法是在具体的实体类中去维护一个映射关系方法，通过这个方法我们可以获取相应的的映射关系</p></blockquote><ol><li>在Model的基类中添加一个返回映射字典的一个方法，然后在子类中进行重写，这个映射方法在基类中返回nil, 如果子类需要重写的话就对这个方法进行重写并返回映射字典。方法如下:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (NSDictionary *)qc_propertyMapDict &#123;</span><br><span class="line">return nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>修改一下我们的便利初始化方法，在有映射字典的情况和没有映射字典的情况下调用的方法是不一样的</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//- (NSDictionary *)qc_propertyMapDict &#123;</span><br><span class="line">//    return @&#123;</span><br><span class="line">//             @&quot;&quot;:@&quot;&quot;,</span><br><span class="line">//             @&quot;&quot;:@&quot;&quot;,</span><br><span class="line">//             @&quot;&quot;:@&quot;&quot;,</span><br><span class="line">//             @&quot;&quot;:@&quot;&quot;</span><br><span class="line">//             &#125;;</span><br><span class="line">//&#125;</span><br><span class="line">- (instancetype)initWithDictionary:(NSDictionary *)data &#123;</span><br><span class="line">self = [super init];</span><br><span class="line">if (self) &#123;</span><br><span class="line">if (![self qc_propertyMapDict]) &#123;</span><br><span class="line">[self assignToPropertyWithDictionary:data];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">[self assignToPropertyWithNoMapDictionary:data];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>接下来就将实现有映射关系要调用的方法，这个方法就是通过映射关系把字典的key转换成与property的名字一样的字典，然后调用之前的赋值方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (void)assignToPropertyWithNoMapDictionary:(NSDictionary *)dict &#123;</span><br><span class="line">NSDictionary *propertyMapDict = [self qc_propertyMapDict];</span><br><span class="line">NSArray *allKeys = dict.allKeys;</span><br><span class="line">NSMutableDictionary *tempDict = [[NSMutableDictionary alloc] initWithCapacity:allKeys.count];</span><br><span class="line">for (NSString *key in allKeys) &#123;</span><br><span class="line">[tempDict setObject:dict[key] forKey:propertyMapDict[key]];</span><br><span class="line">&#125;</span><br><span class="line">[self assignToPropertyWithDictionary:tempDict];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==========================================</p><h3 id="获取Model类属性名称和属性名称对应的类型"><a href="#获取Model类属性名称和属性名称对应的类型" class="headerlink" title="获取Model类属性名称和属性名称对应的类型"></a>获取Model类属性名称和属性名称对应的类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">+ (NSDictionary *)propertyTypeDictionary &#123;</span><br><span class="line">NSMutableDictionary *propertyDictionary = [NSMutableDictionary dictionary];</span><br><span class="line">unsigned int propertyCount = 0;</span><br><span class="line">objc_property_t *properties = class_copyPropertyList([self class], &amp;propertyCount);</span><br><span class="line">if (properties) &#123;</span><br><span class="line">for (unsigned int i = 0; i &lt; propertyCount; i++) &#123;</span><br><span class="line">if (!properties[i]) break;</span><br><span class="line"></span><br><span class="line">const char *name = property_getName(properties[i]);</span><br><span class="line">unsigned int attrCount;</span><br><span class="line">objc_property_attribute_t *attrs = property_copyAttributeList(properties[i], &amp;attrCount);</span><br><span class="line">for (unsigned int i = 0; i &lt; attrCount; i++) &#123;</span><br><span class="line">if (attrs[i].name[0] == &apos;T&apos;) &#123;</span><br><span class="line">if (attrs[i].value) &#123;</span><br><span class="line">NSString *typeEncoding = [NSString stringWithUTF8String:attrs[i].value];</span><br><span class="line">typeEncoding = [[typeEncoding stringByReplacingOccurrencesOfString:@&quot;@\&quot;&quot; withString:@&quot;&quot;] stringByReplacingOccurrencesOfString:@&quot;\&quot;&quot; withString:@&quot;&quot;];</span><br><span class="line">if (name &amp;&amp; typeEncoding) &#123;</span><br><span class="line">[propertyDictionary setObject:typeEncoding forKey:[NSString stringWithUTF8String:name]];</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (attrs) &#123;</span><br><span class="line">free(attrs);</span><br><span class="line">attrs = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">free(properties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (class_getSuperclass([self class]) != [NSObject class]) &#123;</span><br><span class="line">// 加上父类的属性描述器</span><br><span class="line">[propertyDictionary addEntriesFromDictionary:[class_getSuperclass([self class]) propertyTypeDictionary]];</span><br><span class="line">&#125;</span><br><span class="line">return propertyDictionary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Printing description of proertyDictionary:</span><br><span class="line">&#123;</span><br><span class="line">app = BAAppModel;</span><br><span class="line">codablePropertyNames = NSArray;</span><br><span class="line">fileEditTime = NSString;</span><br><span class="line">formEditTime = NSString;</span><br><span class="line">isDoctor = B;</span><br><span class="line">settingEditTime = NSString;</span><br><span class="line">singleDoctor = B;</span><br><span class="line">singleDoctorModel = WorkerModel;</span><br><span class="line">userModel = User;</span><br><span class="line">uuid = NSString;</span><br><span class="line">workerArray = NSArray;</span><br><span class="line">workerInfoModel = BAWokerModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="获取当前类以及子类的映射字典"><a href="#获取当前类以及子类的映射字典" class="headerlink" title="获取当前类以及子类的映射字典"></a>获取当前类以及子类的映射字典</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+ (NSDictionary *)dictionaryKeyPathsForPropertyNamesForClassAndSuperClasses &#123;</span><br><span class="line">NSMutableDictionary *keyPathsMapping = [NSMutableDictionary new];</span><br><span class="line"></span><br><span class="line">Class klass = self;</span><br><span class="line">while (klass != [BAModel class]) &#123;</span><br><span class="line">NSDictionary *klassKeyPaths = [klass dictionaryKeyPathsForPropertyNames];</span><br><span class="line">if (klass) &#123;</span><br><span class="line">[keyPathsMapping addEntriesFromDictionary:klassKeyPaths];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">klass = [klass superclass];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return [keyPathsMapping copy];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取model类以及子类的属性名称"><a href="#获取model类以及子类的属性名称" class="headerlink" title="获取model类以及子类的属性名称"></a>获取model类以及子类的属性名称</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (NSArray *)codablePropertyNames &#123;</span><br><span class="line">NSArray *propertyNames = objc_getAssociatedObject([self class], _cmd);</span><br><span class="line">if (propertyNames) &#123;</span><br><span class="line">return propertyNames;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NSMutableArray *mutPropertyNames = [NSMutableArray array];</span><br><span class="line"></span><br><span class="line">Class klass = [self class];</span><br><span class="line">while (klass != [NSObject class]) &#123;</span><br><span class="line">NSArray *classPropertyNames = [klass codablePropertyNames];</span><br><span class="line">[mutPropertyNames addObjectsFromArray:classPropertyNames];</span><br><span class="line"></span><br><span class="line">klass = [klass superclass];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">propertyNames = [mutPropertyNames copy];</span><br><span class="line">objc_setAssociatedObject([self class], _cmd, propertyNames, OBJC_ASSOCIATION_COPY);</span><br><span class="line"></span><br><span class="line">return propertyNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取子类的属性名称"><a href="#获取子类的属性名称" class="headerlink" title="获取子类的属性名称"></a>获取子类的属性名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">+ (NSArray *)codablePropertyNames &#123;</span><br><span class="line">unsigned int propertyCount;</span><br><span class="line">objc_property_t *properties = class_copyPropertyList(self, &amp;propertyCount);</span><br><span class="line"></span><br><span class="line">NSMutableArray *mutPropertyNames = [NSMutableArray arrayWithCapacity:propertyCount];</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; propertyCount; ++i) &#123;</span><br><span class="line">// Find all properties, backed by an ivar and with a KVC-compliant name</span><br><span class="line">objc_property_t property = properties[i];</span><br><span class="line">const char *name = property_getName(property);</span><br><span class="line">NSString *propertyName = @(name);</span><br><span class="line"></span><br><span class="line">// Check if there is a backing ivar (检查属性是否有与之关联的成员变量)</span><br><span class="line">char *ivar = property_copyAttributeValue(property, &quot;V&quot;);</span><br><span class="line">if (ivar) &#123;</span><br><span class="line">// Check if ivar has KVC-compliant name, i.e. either propertyName or _propertyName （检查成员变量是否兼容kvc）</span><br><span class="line">NSString *ivarName = @(ivar);</span><br><span class="line">if ([ivarName isEqualToString:propertyName] ||</span><br><span class="line">[ivarName isEqualToString:[@&quot;_&quot; stringByAppendingString:propertyName]]) &#123;</span><br><span class="line">// setValue:forKey: will work</span><br><span class="line">[mutPropertyNames addObject:propertyName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">free(ivar);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">free(properties);</span><br><span class="line"></span><br><span class="line">return [mutPropertyNames copy];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在运行时创建一个类，并为这个类添加成员变量"><a href="#在运行时创建一个类，并为这个类添加成员变量" class="headerlink" title="在运行时创建一个类，并为这个类添加成员变量"></a>在运行时创建一个类，并为这个类添加成员变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 在运行时创建继承自NSObject的子类Person</span><br><span class="line">Class Person = objc_allocateClassPair([NSObject class], &quot;Person&quot;, 0);</span><br><span class="line"></span><br><span class="line">BOOL flag1 = class_addIvar(Person, &quot;_name&quot;, sizeof(NSString *), log2(sizeof(NSString *)), @encode(NSString *));</span><br><span class="line">if (flag1) &#123;</span><br><span class="line">NSLog(@&quot;_name 变量添加成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">BOOL flag2 = class_addIvar(Person, &quot;_age&quot;, sizeof(int), sizeof(int), @encode(int));</span><br><span class="line">if (flag2) &#123;</span><br><span class="line">NSLog(@&quot;_age 变量添加成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 完成Person类的创建</span><br><span class="line">objc_registerClassPair(Person);</span><br><span class="line"></span><br><span class="line">unsigned int varCount;</span><br><span class="line">Ivar *varList = class_copyIvarList(Person, &amp;varCount);</span><br><span class="line">for (int i = 0; i &lt; varCount; i ++) &#123;</span><br><span class="line">NSLog(@&quot;%s&quot;,ivar_getName(varList[i]));</span><br><span class="line">&#125;</span><br><span class="line">// 释放varList</span><br><span class="line">free(varList);</span><br><span class="line"></span><br><span class="line">// 创建Person对象p1</span><br><span class="line">id p1 = [Person new];</span><br><span class="line">// 从类中获取对象的成员变量</span><br><span class="line">Ivar name = class_getInstanceVariable(Person, &quot;_name&quot;);</span><br><span class="line">Ivar age = class_getInstanceVariable(Person, &quot;_age&quot;);</span><br><span class="line"></span><br><span class="line">// 为类p1 的成员变量赋值</span><br><span class="line">object_setIvar(p1, name, @&quot;张小三&quot;);</span><br><span class="line">object_setIvar(p1, age, @(20));</span><br><span class="line"></span><br><span class="line">// 获取类p1成员变量的值</span><br><span class="line">NSLog(@&quot;name = %@&quot;,object_getIvar(p1, name));</span><br><span class="line">NSLog(@&quot;age = %@&quot;,object_getIvar(p1, age));</span><br></pre></td></tr></table></figure><h3 id="给类添加属性"><a href="#给类添加属性" class="headerlink" title="给类添加属性"></a>给类添加属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//给已经有的Person类添加属性littleName。</span><br><span class="line">objc_property_attribute_t type = &#123; &quot;T&quot;, &quot;@\&quot;NSString\&quot;&quot; &#125;;//属性类型为NSString</span><br><span class="line">objc_property_attribute_t ownership = &#123; &quot;C&quot;, &quot;copy&quot; &#125;; // C = copy</span><br><span class="line">objc_property_attribute_t backingivar  = &#123; &quot;V&quot;, &quot;_littleName&quot; &#125;;//_littleName为Person类的全局变量，这里是让新属性与之关联</span><br><span class="line">objc_property_attribute_t attrs[] = &#123; type, ownership, backingivar &#125;;</span><br><span class="line">class_addProperty([Person class], &quot;littleName&quot;, attrs, 3);</span><br><span class="line">//验证是否添加成功</span><br><span class="line">objc_property_t pt =  class_getProperty([Person class], &quot;littleName&quot;);</span><br><span class="line">NSLog(@&quot;property&apos;s name: %s&quot;, property_getName(pt));</span><br><span class="line">NSLog(@&quot;property&apos;attribute:%s&quot;,property_getAttributes(pt));</span><br><span class="line">NSLog(@&quot;property&apos;release:%s&quot;,property_copyAttributeValue(pt, &quot;C&quot;));</span><br><span class="line">NSLog(@&quot;property&apos;type:%s&quot;,property_copyAttributeValue(pt, &quot;T&quot;));</span><br><span class="line">NSLog(@&quot;property&apos;value:%s&quot;,property_copyAttributeValue(pt, &quot;V&quot;));</span><br><span class="line">//之后我们可以用KVC操作这个属性</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;实现实体基类中的方法&quot;&gt;&lt;a href=&quot;#实现实体基类中的方法&quot; class=&quot;headerlink&quot; title=&quot;实现实体基类中的方法&quot;&gt;&lt;/a&gt;实现实体基类中的方法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;实体基类中的方法是从各个Model中抽象出来的并且
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博文第一篇</title>
    <link href="http://yoursite.com/2017/12/07/%E6%89%93%E5%BC%80%E4%BA%86/"/>
    <id>http://yoursite.com/2017/12/07/打开了/</id>
    <published>2017-12-07T08:57:57.000Z</published>
    <updated>2017-12-09T02:41:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>你好，欢迎来到我的个人技术博客。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好，欢迎来到我的个人技术博客。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/12/07/hello-world/"/>
    <id>http://yoursite.com/2017/12/07/hello-world/</id>
    <published>2017-12-07T07:01:41.000Z</published>
    <updated>2017-12-07T07:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
